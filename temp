1.0101702826751537
1.0332342425607082
1.0418733128360664
1.0465834892639956
1.0646013338334686
1.0683164325236227
1.0708524641611468
1.0708874824182044
1.0730116495173758
1.0743691172032077
1.081387996974259
1.0914824781003127
1.0930773074215747
1.0952698297679893
1.1002799643727044
1.1048013396081668
1.1087384723188782
1.1087452367428687
1.1230912696660054
1.126375159527233
1.1333971060488903
1.144274442605444
1.1457683011848423
1.1486156885573173
1.1618106558299421
1.162239218061411
1.1682465493208185
1.1691971604481428
1.184228018584259
1.1843124587709108
1.1869220698933862
1.191018471729133
1.1913626651863822
1.1997737286672014
1.2008601084222925
1.2010116568959686
1.2018989142186625
1.2034005983046543
1.2072265735975165
1.2255321293217898
1.2256757319943967
1.226672327885487
1.226672327885487
1.2341474790315783
1.2342224272796212
1.2407743549896575
1.2423240318049071
1.244065914652435
1.2466711675498072
1.2506322401089778
1.252036740674969
1.2536442876669602
1.2581100905723634
1.2594685387098796
1.2596150205519143
1.2611518544568692
1.2626828580447271
1.266192718348988
1.2681182910123172
1.2685507479009264
1.2694916305356252
1.2719186294728133
1.278466268620334
1.2799691402529985
1.2832264024715203
1.2847665157529597
1.2913930462876126
1.2922697086908754
1.294593758674898
1.29566546608297
1.3006598325465424
1.3024657385129177
1.30732168956229
1.30778591520172
1.3093013404102207
1.3121131810937652
1.3125734265175415
1.3208747101826124
1.320947008778172
1.3218763179662458
1.3236706539014909
1.3254693508338848
1.3283674190524246
1.329221200553166
1.3292373753397098
1.334241357476225
1.3378434138567936
1.3380078475106192
1.3381464792764652
1.3384786139494347
1.3393543220522344
1.343525585911932
1.3436744397360545
1.3472642650942688
1.3513637556187454
1.351839487513218
1.351839487513218
1.3605675286438377
1.3620297353582265
1.3629002164501993
1.3645222607198464
1.3648868084936567
1.3651465122835718
1.3677441281175364
1.369343273251817
1.3716446332778764
1.3726474419893842
1.373091402638586
1.3741604709785535
1.376517344605581
1.3829085291515126
1.3839855490575035
1.3897122004213678
1.3915750069615365
1.3927200005744154
1.3931101894681555
1.3933499201564552
1.3942471086575723
1.3972888033617101
1.3977929031154794
1.4002321236137956
1.4041623837719053
1.405126328840222
1.405395318051117
1.406940297240789
1.4148144754701941
1.4167342728966503
1.417761968738053
1.4200704207890538
1.4203520690307738
1.4214302656127735
1.4231921866002497
1.428482061490448
1.4286357128393505
1.4288701830467316
1.4342789129036235
1.4386080077630599
1.4401819329515282
1.441785351569366
1.4421556781429667
1.4426170663069255
1.4426170663069255
1.4440831001019299
1.4450972285628396
1.4500048275781705
1.4523759843787007
1.4531772087395258
1.4544889136738033
1.4570847607466082
1.4571633401921693
1.463663212627823
1.4664941186380531
1.4682387408047781
1.4702234524044295
1.4724241915969734
1.4732009367360583
1.473581012364098
1.4763580189100476
1.4786345052108045
1.4822027526624015
1.4826304327107276
1.485173727211736
1.4854292308959052
1.4864534974226404
1.4933351934512225
1.4984435257960174
1.4987514803996025
1.4994869122469858
1.504308479002894
1.50776689179727
1.509160031275676
1.510276133692114
1.5119570099708526
1.5153418756175123
1.5159709759754638
1.516675311330675
1.5226519628595365
1.5230236373740231
1.5360471997956313
1.5368597854065933
1.5384761941609626
1.5399272710099003
1.5464362256491535
1.5481601984290903
1.5511621449738904
1.5513684281949276
1.5527923235255898
1.5545365868965582
1.5561686926551375
1.5568330032472977
1.5584222791015276
1.5619286155263308
1.5619990396924064
1.56429217219802
1.5679250619847878
1.5689196920174087
1.5734996027962636
1.5767463334347729
1.5797151641989133
1.5813857846838004
1.58138831410884
1.5823959681445094
1.5860104034967741
1.5896779548071995
1.5901433897608102
1.5904364180941029
1.594095668396348
1.5958809479406666
1.5974341926977775
1.6000028124975283
1.6022537252258144
1.602474648785434
1.6039716331656242
1.6130641648737971
1.6135553910541776
1.613939280146561
1.6161314921750642
1.6173206237478082
1.625135378976164
1.625423021862309
1.6255202244204776
1.6276670421188728
1.629589212040875
1.634625339336204
1.6358254796890774
1.6442420746349975
1.649568731517423
1.6497117930111307
1.6511014505474821
1.6531814782412728
1.6556599892490003
1.65718586766844
1.659536381041404
1.6628015515989876
1.663923075145002
1.6674699397590351
1.6709278859364338
1.671451465044678
1.6736681271984597
1.6770974926938509
1.6911312781685517
1.694361531669083
1.6954129290529785
1.6956756765372323
1.6974041946454592
1.7027025577005517
1.703973297912852
1.7043253797324032
1.704858351887335
1.7051263882774204
1.7056708357710757
1.706023446497732
1.7074029987088581
1.7102049584771997
1.713383786546377
1.7150055393496548
1.715441634098928
1.720356067795269
1.72325651021547
1.7237183644667708
1.7239083502321113
1.7248141928915126
1.730661434249923
1.73216627377397
1.733236567811792
1.733847744180555
1.7437101249921103
1.7511861694291673
1.7549507115585896
1.7591841859225543
1.7628581905530576
1.7631020957392118
1.77209508774219
1.7737263035767385
1.7803134555465225
1.7850557414265806
1.786015117517206
1.792600624790698
1.792662823846135
1.79355066836708
1.7943592171023057
1.7961837322501282
1.8002113764777736
1.8006046206760664
1.8094001768541974
1.8125882047503232
1.8206551018795405
1.8228631325472573
1.828879711736122
1.8298931662804798
1.834432064700135
1.8417692580776777
1.8434394484224321
1.85343734720114
1.8576913091253884
1.8595870509336203
1.8613653590845618
1.8640010729610645
1.8719636748612405
1.8735615815873257
1.8738729946290384
1.8775025965361536
1.8793094476429368
1.879339245586065
1.8882002012498569
1.8892061825009996
1.8892551442301275
1.892511558749378
1.8945126022278131
1.8968157527814875
1.8999694734389811
1.9016361376456854
1.9033173671250943
1.9043279654513294
1.9103311231302285
1.9111922980171305
1.9119926778102472
1.922327235410246
1.9312576213441852
1.9485204643523766
1.9505896544378574
1.9510840576459025
1.9589387432995449
1.9674239502455997
1.9686584264417228
1.9709157769930201
1.972263674055779
1.9752693487218393
1.9774349546824546
1.9793678283734935
1.987903669698308
1.9935990068215825
2.003122562401013
2.0067458732983607
2.008033864256278
2.0172411853816588
2.0234379160231235
2.0289898964755837
2.047909421825096
2.0592855557207215
2.090931849678511
2.0947689610073947
2.102716338453668
2.102716338453668
2.1044669158720457
2.1263819036099796
2.144849878196607
2.1473229845554207
2.183575050232989
2.1837144959907193
2.18954333138214
2.195722204651581
2.1964384808138835
2.2056348292498464
2.2130451870669066
2.218410241591938
2.229973318226028
2.24169244099185
2.2480794025122868
2.2532873762571874
2.26243872845211
2.2734995051681888
2.291628460287575
2.3129409849799454
2.325348145977286
2.337669779930433
2.358291118585659
2.3855332737147057
2.3934410375022823
2.4980344273047956
2.5809659044629005
2.6413632843666166
2.68689579254574
2.806785527966111
2.8652554859907347
2.8698013868558916
2.9306606763663376
2.941687440908704
2.9528503179131853
2.9911536236041107
3.0231627478519907
3.210616763178066
3.3788755526062215
3.444594751200785
3.4729157778443165
6.0891809794093
//


package cse.buffalo.datamining;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class DBScan {
	
	ArrayList<RowStructure> rowStructureArray = new ArrayList<RowStructure>();
	ArrayList<Integer> visited = new ArrayList<Integer>();
	HashMap<Integer, ArrayList<Integer>> clusters=new HashMap<>();
	public static Double EPS= 4.0;//6.0891809794093;
	public static Integer minimumPoints=2;
	public DBScan(ArrayList<RowStructure> rowStructureArray)
	{
		this.rowStructureArray=rowStructureArray;
		for(int i=0;i<rowStructureArray.size();i++)
			visited.add(0);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		DBScan db1=new DBScan(DataExtractor.main(null));
		
		for(int i=0;i<db1.rowStructureArray.size();i++){
			RowStructure row =db1.rowStructureArray.get(i);
			//System.out.println("geneId: "+row.geneId+" | Visited: "+db1.visited.get(i)+" | geneDimensions: "+row.geneDimensions);
		}
		Double distance=0.0;
		int count=0;
		ArrayList<Double> distanceListRow;
		ArrayList<Double> distanceListGlobal=new ArrayList<Double>();
		for(int i=0;i<db1.rowStructureArray.size();i++){
			RowStructure r1,r2;
			distanceListRow=new ArrayList<Double>();
			r1=db1.rowStructureArray.get(i);
			for(int j=0;j<db1.rowStructureArray.size();j++){
				r2=db1.rowStructureArray.get(j);
				if(r1.geneId==r2.geneId)
					continue;
				else{
					distance=computeDistance(r1, r2);
					distanceListRow.add(distance);
					distance=null;
				}
			}
			count++;//3.4729157778443165
			Collections.sort(distanceListRow);
			distanceListGlobal.add(distanceListRow.get(r1.geneDimensions.size()+1));
			distanceListRow=null;
			//System.out.println(distanceListRow);
		}
		Collections.sort(distanceListGlobal);
//		System.out.println("printing distances");
//		for(int i=0;i<distanceListGlobal.size();i++)
//			System.out.println(distanceListGlobal.get(i));
		//System.out.println(distanceListGlobal);
		System.out.println(distanceListGlobal.size());
		
		//for distance>epsilon
		HashMap<Integer, ArrayList<Integer>> numOfPoints=new HashMap<>();
		for(int i=0;i<db1.rowStructureArray.size();i++){
			RowStructure r1,r2;
//			distanceListRow=new ArrayList<Double>();
			r1=db1.rowStructureArray.get(i);
			ArrayList<Integer> tempPointsList=new ArrayList<Integer>();
			for(int j=0;j<db1.rowStructureArray.size();j++){
				r2=db1.rowStructureArray.get(j);
				if(r1.geneId==r2.geneId)
					continue;
				else{
					distance=computeDistance(r1, r2);
					if(distance>EPS)
						tempPointsList.add(r2.geneId);
				}
			}
			numOfPoints.put(r1.geneId, tempPointsList);
		}
//		for(Map.Entry<Integer, ArrayList<Integer>> entry : numOfPoints.entrySet())
//			System.out.println(entry.getKey()+"  **   "+entry.getValue().size());
		System.out.println(numOfPoints.size());
		//db1.DBScan(db1,EPS,db1.rowStructureArray.get(0).geneDimensions.size());
		db1.DBScan(db1,EPS,minimumPoints);
		System.out.println("Printing Clusters");
		for(Map.Entry<Integer, ArrayList<Integer>> entry : db1.clusters.entrySet())
			System.out.println(entry);
	}

	public void DBScan(DBScan dbscan, Double epsilon,Integer minPts) {
		System.out.println("in dbsacn");
		Integer currentCluster=0;
		
		ArrayList<Integer> neighborPoints=new ArrayList<>();
		for(int i=0;i<dbscan.rowStructureArray.size();i++){
			if(dbscan.visited.get(i)==0){
				dbscan.visited.set(i, 1);
			
				neighborPoints=regionQuery(dbscan.rowStructureArray.get(i), epsilon);
				System.out.println(neighborPoints.size());
				
				if(neighborPoints.size()<minPts){
					ArrayList<Integer> pointsInCurrentCluster=new ArrayList<>();
					if(clusters.containsKey(-1)){
						pointsInCurrentCluster=clusters.get(-1);
						pointsInCurrentCluster.add(dbscan.rowStructureArray.get(i).geneId);
						clusters.put(-1, pointsInCurrentCluster);
					}
					else{
						pointsInCurrentCluster=new ArrayList<>();
						pointsInCurrentCluster.add(dbscan.rowStructureArray.get(i).geneId);
						clusters.put(-1, pointsInCurrentCluster);
					}
				}
				else{
					currentCluster++;
					this.expandCluster(dbscan.rowStructureArray.get(i), neighborPoints, currentCluster, epsilon, minPts);
				}
			}	
				
		}
	}
	
	public void expandCluster(RowStructure P,ArrayList<Integer> neighborPoints,Integer currentCluster,Double epsilon,Integer minPts) {
		ArrayList<Integer> pointsInCurrentCluster=new ArrayList<>();
		if(clusters.containsKey(currentCluster)){
			pointsInCurrentCluster=clusters.get(currentCluster);
			pointsInCurrentCluster.add(P.geneId);
			clusters.put(currentCluster, pointsInCurrentCluster);
		}
		else{
			pointsInCurrentCluster.add(P.geneId);
			clusters.put(currentCluster, pointsInCurrentCluster);
		}
		for(int i=0;i<this.rowStructureArray.size();i++){
			RowStructure r1=this.rowStructureArray.get(i);
			if(neighborPoints.contains(r1.geneId)){
				if(this.visited.get(i)==0){
					this.visited.set(i, 1);
					ArrayList<Integer> neighborPointsNew=new ArrayList<>();
					neighborPointsNew=regionQuery(r1, epsilon);
					if(neighborPointsNew.size()>=minPts){
						for(Integer currentPoint : neighborPointsNew){
							if(neighborPoints.contains(currentPoint))
								continue;
							else
								neighborPoints.add(currentPoint);
						}
					}
				}
				int assignedFlag=0;
				for(int j=1;j<=currentCluster;j++){
					if(clusters.get(j).contains(r1.geneId))
						assignedFlag=1;
				}
				if(assignedFlag==0){
					pointsInCurrentCluster= new ArrayList<>();
					if(clusters.containsKey(currentCluster)){
						 pointsInCurrentCluster=clusters.get(currentCluster);
						 pointsInCurrentCluster.add(r1.geneId);
						 clusters.put(currentCluster, pointsInCurrentCluster);
					}
					else{
						pointsInCurrentCluster.add(r1.geneId);
						clusters.put(currentCluster, pointsInCurrentCluster);
					}
				}
			}
		}
	}
	
	public ArrayList<Integer> regionQuery(RowStructure P,Double epsilon) {
		
		ArrayList<Integer> neighbourPoints=new ArrayList<>();
		for(int i=0;i<this.rowStructureArray.size();i++){
			Double distance=0.0;
			if(P.geneId==this.rowStructureArray.get(i).geneId)
				continue;
			else{
				distance = computeDistance(P, this.rowStructureArray.get(i));
				if(distance>EPS)
					neighbourPoints.add(this.rowStructureArray.get(i).geneId);
				
			}
		}
		return neighbourPoints;
	}
	public static Double computeDistance(RowStructure rs1, RowStructure rs2){
		Double distance = (double) 0;
		if (!rs1.equals(rs2)){
			ArrayList<Double> dimension1 = rs1.geneDimensions;
			ArrayList<Double> dimension2 = rs2.geneDimensions;
			for(int i = 0; i < dimension1.size(); i++){
				distance += Math.pow( (dimension1.get(i) - dimension2.get(i)), 2 );
			}
			distance = Math.sqrt(distance);
		}
		return distance;
	}
}


